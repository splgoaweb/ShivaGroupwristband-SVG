@using Nop.Core
@using Nop.Services.Configuration
@using Nop.Services.Security
@using Nop.Services.Orders
@using Nop.Core.Domain.Orders

@inject IStoreContext storeContext
@inject IWorkContext workContext
@inject ISettingService settingService
@inject IPermissionService permissionService
@inject ShoppingCartSettings shoppingCartSettings
@inject IShoppingCartService shoppingCartService

@{
    Layout = "_Root.Head";

    var storeId = storeContext.CurrentStore.Id;

    var controllerName = Url.ActionContext.RouteData.Values["controller"].ToString();
    var isHomePage = controllerName.Equals("home", StringComparison.InvariantCultureIgnoreCase);

    var customer = workContext.CurrentCustomer;
    int shoppingCartItems = 0;
    int wishlistItems = 0;

    if (customer.HasShoppingCartItems)
    {
        shoppingCartItems = shoppingCartService.GetShoppingCart(workContext.CurrentCustomer, ShoppingCartType.ShoppingCart, storeContext.CurrentStore.Id)
                          .Sum(item => item.Quantity);

        wishlistItems = shoppingCartService.GetShoppingCart(workContext.CurrentCustomer, ShoppingCartType.Wishlist, storeContext.CurrentStore.Id)
                          .Sum(item => item.Quantity);
    }

    string sliderType = settingService.GetSettingByKey("prismathemesettings.slidertype", "full-width-slider", storeId, true);
}

@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BodyStartHtmlTagAfter })
@await Html.PartialAsync("_Notifications")
@await Html.PartialAsync("_JavaScriptDisabledWarning")
@await Html.PartialAsync("_OldInternetExplorerWarning")


<div class="master-wrapper-page">
    <div class="master-header-wrapper-parent">
        <div class="master-header-wrapper">
            @await Component.InvokeAsync("AdminHeaderLinks")
            <div class="header-wrapper">
                @await Html.PartialAsync("_Header")
                <script asp-location="Footer">
		            var localized_data = {
		                AjaxCartFailure: "@T("AjaxCart.Failure")"
		            };
                    AjaxCart.init(false, '.cart-qty', '.wishlist-qty', '#flyout-cart', localized_data);
                </script>
                <div class="responsive-nav-wrapper-parent">
                    <div class="responsive-nav-wrapper">
                        <div class="menu-title">
                            <span>@T("SevenSpikes.Themes.Common.MenuTitle")</span>
                        </div>
                        <div class="search-wrap">
                            <span>@T("Search")</span>
                        </div>
                        <div class="personal-button" id="header-links-opener">
                            <span>@T("SevenSpikes.Themes.Common.Personal")</span>
                        </div>
                        <div class="wishlist-button">
                            <a href="@Url.RouteUrl("Wishlist")" class="ico-wishlist">
                                <span class="wishlist-label">@T("Wishlist")</span>
                                <span class="wishlist-qty">@T("Wishlist.HeaderQuantity", wishlistItems)</span>
                            </a>
                        </div>
                        <div class="shopping-cart-link">
                            <a href="@Url.RouteUrl("ShoppingCart")">@T("ShoppingCart")</a>
                            <span class="cart-qty">@T("ShoppingCart.HeaderQuantity", shoppingCartItems)</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="overlayOffCanvas"></div>
        <div class="header-menu">
            <div class="navigation-wrapper">
                <div class="close-menu">
                    <span>@T("SevenSpikes.Themes.Common.CloseMenu")</span>
                </div>
            </div>
            @{
                var menuHtml = await Component.InvokeAsync("Widget", new { widgetZone = "theme_header_menu" });
            }
            @if (!String.IsNullOrEmpty(menuHtml.ToHtmlString()))
            {
                @menuHtml
            }
            else
            {
                @await Component.InvokeAsync("TopMenu")
            }
        </div>
    </div>
    @if (isHomePage)
    {
        if (sliderType == "full-width-slider")
        {
            @await Component.InvokeAsync("Widget", new { widgetZone = "home_page_main_slider" })
        }
        else if (sliderType == "standard-slider")
        {
            <div class="home-page-top-banner-wrapper">
                <div class="slider-left">
                    @await Component.InvokeAsync("Widget", new { widgetZone = "home_page_main_slider" })
                </div>
                <div class="banners-right">
                    <div>@await Component.InvokeAsync("Widget", new { widgetZone = "home_page_right_banner_1" })</div>
                </div>
            </div>
        }
        else
        {
            <div class="slider-gallery">
                @await Component.InvokeAsync("Widget", new { widgetZone = "home_page_main_slider" })
            </div>
        }
    }
    <div class="master-wrapper-content">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ContentBefore })
        @await Component.InvokeAsync("Widget", new { widgetZone = "prisma_color_squares" })
        @if (IsSectionDefined("Breadcrumb"))
        {
            @RenderSection("Breadcrumb")
        }
        <div class="master-column-wrapper">
            @RenderBody()
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ContentAfter })
    </div>
    @await Component.InvokeAsync("Footer")
    <div class="filter-options">
        <div class="filters-button">
            <span>@T("SevenSpikes.Themes.Common.Filters")</span>
        </div>
        <div class="product-sorting-mobile">
            Sort
        </div>
        <div class="product-display-mobile">
            display
        </div>
    </div>
</div>
@await Component.InvokeAsync("EuCookieLaw")
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BodyEndHtmlTagBefore })
